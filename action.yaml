---
name: Dependency Test
author: Insights Engineering
description: Resolve package dependencies according to the strategy used, install them and execute R CMD CHECK

inputs:
  github-token:
    description: Token to clone dependencies from GitHub repositories.
    required: false
    default: ""
  repository-path:
    description: Directory where the checked package has been cloned.
    required: false
    default: "."
  check-args:
    description: Optional value of args argument to rcmdcheck::rcmdcheck in form of a string with space as delimeter, e.g. "--no-examples --no-tests".
    required: false
    default: ""
  build-args:
    description: Optional value of build_args argument to rcmdcheck::rcmdcheck in form of a string with space as delimeter, e.g. "--force --keep-empty-dirs".
    required: false
    default: ""
  strategy:
    description: |
      Strategy to test package dependencies. One of: min, release, max.
    required: true
  additional-env-vars:
    description: |
      Additional environment variables.
      Example usage:
        additional-env-vars: |
          ABC=123
          XYZ=456
    required: false
    default: ""

branding:
  icon: 'refresh-ccw'
  color: 'blue'

runs:
  using: composite
  steps:
    - name: Run Dependency Test
      run: |
        echo "Dependency Test strategy: ${{ inputs.strategy }}"
        if [ "${{ inputs.additional-env-vars }}" != "" ]
        then {
          echo -e "${{ inputs.additional-env-vars }}" > /tmp/dotenv.env
          export $(tr '\n' ' ' < /tmp/dotenv.env)
        }
        fi
        echo ".libPaths(\" \", include.site = FALSE)" > .Rprofile
        export R_LIBS_SITE=" "
        export R_LIBS_USER=" "
        Rscript ${GITHUB_ACTION_PATH}/script.R '${{ inputs.repository-path }}' '${{ inputs.build-args }}' '${{ inputs.check-args }}' '${{ inputs.strategy }}'
      shell: bash
      env:
        GITHUB_PAT: "${{ inputs.github-token }}"
        _R_CHECK_TESTS_NLINES_: 0
    - name: "DEBUG: Installation proposal & Config"
      run: |
        x <- readRDS("res.RDS")
        cli::cli_h2("Installation proposal:")
        x$ip

        cli::cli_h2("Installation proposal config:")
        x$ip$get_config()

        cli::cli_h2("Package DESCRIPTION file used (see Remotes section):")
        cat(readLines(gsub(".*::", "", x$ip$get_refs())))
        cat("\n")
      shell: Rscript {0}
    - name: "DEBUG: Dependency solution"
      run: |
        x <- readRDS("res.RDS")

        cli::cli_h2("Dependency solution:")
        x$ip$get_solution()
      shell: Rscript {0}
    - name: "DEBUG: Dependency resolution"
      run: |
        x <- readRDS("res.RDS")

        cli::cli_h2("Dependency resolution:")
        x_res <- subset(x$ip$get_resolution(), , c(ref, package, version, mirror, sources))
        if ("tibble" %in% rownames(installed.packages())) {
            print(x_res, n = Inf)
        } else {
            print(as.data.frame(x_res))
        }

      shell: Rscript {0}
    - name: "DEBUG: Dependency resolution"
      run: |
        x <- readRDS("res.RDS")

        cli::cli_h2("Dependency resolution (tree):")
        try(x$ip$draw())

        # TODO: https://github.com/r-lib/pkgdepends/issues/305 - remove when fixed
        # this provides additional debug info in case of empty error report
        if (inherits(x$ip, "pkg_installation_proposal") &&
            inherits(x$ip$get_solution(), "pkg_solution_result") &&
            x$ip$get_solution()$status == "FAILED" &&
            inherits(x$ip$get_solution()$failures, "pkg_solution_failures") &&
            grepl("*.dependency conflict$", format(x$ip$get_solution()$failures)[[1]])
        ) {
            cli::cli_h2("Supplementary solution (experimental):")
            xx <- pkgdepends::new_pkg_deps(
                trimws(strsplit(
                    desc::desc(
                        gsub("deps::", "", x$ip$get_refs())
                    )$get_field("Config/Needs/verdepcheck")
                , ",")[[1]]),
                config = list(library = tempfile())
            )
            verdepcheck:::solve_ip(xx)
            xx$get_solution()
        }

        cli::cli_h1("Create lockfile...")
        try(x$ip$create_lockfile("pkg.lock"))

      shell: Rscript {0}
    - name: "DEBUG: R CMD check"
      run: |
        x <- readRDS("res.RDS")
        cli::cli_h1("R CMD CHECK:")
        x$check

        cli::cli_h2("R CMD CHECK status:")
        cat(x$check$status)
        cat("\n")

        cli::cli_h2("R CMD CHECK install out:")
        cat(x$check$install_out)

        cli::cli_h2("R CMD CHECK stdout:")
        cat(x$check$stdout)

        cli::cli_h2("R CMD CHECK stderr:")
        cat(x$check$stderr)

        cli::cli_h2("R CMD CHECK session info:")
        x$check$session_info

        cli::cli_h2("R CMD CHECK test output:")
        lapply(x$check$test_output, cat)
      shell: Rscript {0}

